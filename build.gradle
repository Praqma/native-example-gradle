apply plugin: 'cpp'
apply plugin: 'google-test'

model {
    repositories {
        libs(PrebuiltLibraries) {
            googleTest {
                // Related workaround for https://github.com/gradle/gradle/issues/823 issue.
                // Check for the existence of our custom property before trying to use it in configuration.
                // https://github.com/gradle/gradle/issues/859#issuecomment-263279554
                headers.srcDirs = [
                    new File(projectDir, "3rdparty/googletest-master/googletest/include"),
                    new File(projectDir, "3rdparty/googletest-master/googlemock/include")
                ]
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file(projectDir.getPath() \
                        + "/3rdparty/googletest-master/googlemock/lib/" \
                        + findGoogleTestStaticLib(targetPlatform))
                }
            }
        }
    }
    components {
        // We did not include the Google {Test,Mock} directly as `NativeLibrarySpec` into Gradle environment.
        // For each `NativeExecutableSpec` and `NativeLibrarySpec` defined in your project, Gradle will create a matching `GoogleTestTestSuiteSpec` component,named `${component.name}Test`.<sup>[Reference](https://docs.gradle.org/current/userguide/native_software.html#native_binaries:google_test)</sup>
        // It has caused undefined main entry point.
                
        /*
        See file:///workspace/build/tmp/linkGtestTestGoogleTestExe/output.txt for all output for linkGtestTestGoogleTestExe.
        linking gtestTest failed.
        /usr/lib/gcc/x86_64-linux-gnu/6/../../../x86_64-linux-gnu/Scrt1.o: In function `_start':
        (.text+0x20): undefined reference to `main'
        collect2: error: ld returned 1 exit status

        Finished linkGtestTestGoogleTestExe, see full log file:///workspace/build/tmp/linkGtestTestGoogleTestExe/output.txt.
        */

        // gtest(NativeLibrarySpec) {
        //     sources {
        //         cpp {
        //             source {
        //                 srcDir '3rdparty/googletest-master/googletest/src'
        //                 include 'gtest-all.cc'
        //             }
        //             exportedHeaders {
        //                 srcDirs = [
        //                     '3rdparty/googletest-master/googletest/include',
        //                     '3rdparty/googletest-master/googletest'
        //                     ]
        //                 includes = [
        //                     '**/*.h',
        //                     '**/*.cc'
        //                     ]
        //             }
        //         }
        //     }
        //     binaries.all {
        //         // cppCompiler.define 'GTEST_IMPLEMENTATION_', '1'
        //         if (toolChain in VisualCpp) {
        //             cppCompiler.args '-D_UNICODE', '-DUNICODE', '-DWIN32',  '-D_WIN32', '-DSTRICT', '-DWIN32_LEAN_AND_MEAN', '-D_HAS_EXCEPTIONS=1'
        //         } else if (toolChain in Gcc) {
        //             cppCompiler.args '-I', "${projectDir}/3rdparty/googletest-master/googletest"
        //             cppCompiler.args '-Wall', '-Wshadow', '-fexceptions', '-Wextra', '-Wno-unused-parameter', '-Wno-missing-field-initializers', '-pthread', '-fPIC'
        //         }
        //     }
        //     binaries.withType(StaticLibraryBinarySpec) {
        //         cppCompiler.args '-fPIC'
        //     }
        //     binaries.withType(SharedLibraryBinarySpec) {
        //         buildable = false
        //         // cppCompiler.define 'GTEST_CREATE_SHARED_LIBRARY', '1'
        //     }
        // }
        // gtest_main(NativeLibrarySpec) {
        //     sources {
        //         cpp {
        //             lib library: 'gtest', linkage: 'static'
        //             source {
        //                 srcDir '3rdparty/googletest-master/googletest/src'
        //                 include 'gtest_main.cc'
        //             }
        //         }
        //     }
        // }

        /*
        See file:///workspace/build/tmp/linkGmockTestGoogleTestExe/output.txt for all output for linkGmockTestGoogleTestExe.
        linking gmockTest failed.
        /usr/lib/gcc/x86_64-linux-gnu/6/../../../x86_64-linux-gnu/Scrt1.o: In function `_start':
        (.text+0x20): undefined reference to `main'
        collect2: error: ld returned 1 exit status

        Finished linkGmockTestGoogleTestExe, see full log file:///workspace/build/tmp/linkGmockTestGoogleTestExe/output.txt.
        */

        // gmock(NativeLibrarySpec) {
        //     sources {
        //         cpp {
        //             // lib library: 'gtest', linkage: 'static'
        //             source {
        //                 srcDirs = [
        //                     '3rdparty/googletest-master/googlemock/src',
        //                     '3rdparty/googletest-master/googletest/src'
        //                     ]
        //                 includes = [
        //                     '*-all.cc'
        //                     ]
        //             }
        //             exportedHeaders {
        //                 srcDirs = [
        //                     '3rdparty/googletest-master/googlemock/include',
        //                     '3rdparty/googletest-master/googletest/include',
        //                     '3rdparty/googletest-master/googlemock',
        //                     '3rdparty/googletest-master/googletest'
        //                     ]
        //                 includes = [
        //                     '**/*.h',
        //                     '**/*.cc'
        //                     ]
        //             }
        //         }
        //     }
        //     binaries.all {
        //         if (toolChain in VisualCpp) {
        //             cppCompiler.args '-D_UNICODE', '-DUNICODE', '-DWIN32',  '-D_WIN32', '-DSTRICT', '-DWIN32_LEAN_AND_MEAN', '-D_HAS_EXCEPTIONS=1'
        //         } else if (toolChain in Gcc) {
        //             cppCompiler.args '-I', "${projectDir}/3rdparty/googletest-master/googlemock"
        //             cppCompiler.args '-Wall', '-Wshadow', '-fexceptions', '-Wextra', '-Wno-unused-parameter', '-Wno-missing-field-initializers', '-pthread', '-fPIC'
        //         }
        //     }
        //     binaries.withType(StaticLibraryBinarySpec) {
        //         cppCompiler.args '-fPIC'
        //     }
        //     binaries.withType(SharedLibraryBinarySpec) {
        //         buildable = false
        //         // cppCompiler.define 'GTEST_CREATE_SHARED_LIBRARY', '1'
        //     }
        // }

        greeter(NativeLibrarySpec) { 
            sources {
                cpp {
                    lib library: 'googleTest', linkage: 'static'
                }
            }
        }
        shapey(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: 'googleTest', linkage: 'static'
                }
            }
         }
        // Let's try using the library
        main(NativeExecutableSpec) {
            sources {
                cpp.lib library: "greeter"
                cpp.lib library: "shapey"
            }
        }
    }

    binaries {
        all {
            // println "binary=${name} buildable=${buildable}"
        }
        withType(SharedLibraryBinarySpec) {
            if (toolChain in VisualCpp) {
                cppCompiler.define "DLL_EXPORT"
            }
        }
        withType(GoogleTestTestSuiteBinarySpec) {
            lib library: "googleTest", linkage: "static"

            if (targetPlatform.operatingSystem.linux) {
                cppCompiler.args '-pthread'
                linker.args '-pthread'
            }
        }
    }
}

tasks.withType(RunTestExecutable) {
    args "--gtest_output=xml:test_detail.xml"
}

def findGoogleTestStaticLib(Platform platform) {
    // println System.getProperty("os.name") + System.getProperty("os.version") + System.getProperty("os.arch")
    // String osName = org.gradle.internal.os.OperatingSystem.current().getName();
    // String osVersion = org.gradle.internal.os.OperatingSystem.current().getVersion();
    // String osArch = org.gradle.internal.os.OperatingSystem.current().getArch();
    // println "*** $osName, $osVersion, $osArch was detected."

    if (platform.operatingSystem.windows) {
        return "vs2015/gtest.lib"
    } else if (platform.operatingSystem.macOsX) {
        return "osx/libgtest.a"
    } else {
        return "libgmock.a"
    }
}
