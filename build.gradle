apply plugin: 'cpp'
//apply plugin: 'google-test'

model {
    repositories {
/*        libs(PrebuiltLibraries) {
            googleTest {
                headers.srcDir new File(projectDir, "3rdparty/googletest-master/googletest/include")
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file(projectDir.getPath() + "/3rdparty/googletest-master/googletest/build/" + findGoogleTestStaticLib(targetPlatform))
                }
            }
        }
*/    }
    components {
        gtest(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDir '3rdparty/googletest-master/googletest/src'
                        include 'gtest-all.cc'
                    }
                    exportedHeaders {
                        srcDir '3rdparty/googletest-master/googletest/include'
                    }
                }
            }
            binaries.all {
                cppCompiler.define 'GTEST_IMPLEMENTATION_', '1'
                cppCompiler.args '-I', "${projectDir}/3rdparty/googletest-master/googletest"
            }
            binaries.withType(SharedLibraryBinarySpec) {
                cppCompiler.define 'GTEST_CREATE_SHARED_LIBRARY', '1'
            }
        }
        gtest_main(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: 'gtest'
                    source {
                        srcDir '3rdparty/googletest-master/googletest/src'
                        include 'gtest_main.cc'
                    }
                }
            }
        }
        gmock(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: 'gtest'
                    source {
                        srcDir '3rdparty/googletest-master/googlemock/src'
                        include 'gmock-all.cc'
                    }
                    exportedHeaders {
                        srcDir '3rdparty/googletest-master/googlemock/include'
                    }
                }
            }
            binaries.all {
                cppCompiler.args '-I', "${projectDir}/3rdparty/googletest-master/googlemock"
            }
        }
        greeter(NativeLibrarySpec) { }
        shapey(NativeLibrarySpec) { }
        // Let's try using the library
        main(NativeExecutableSpec) {
            sources {
                cpp.lib library: "greeter"
                cpp.lib library: "shapey"
            }
        }
    }


    binaries {
        all {
            println "binary=${name} buildable=${buildable}"
        }
        withType(SharedLibraryBinarySpec) {
            if (toolChain in VisualCpp) {
                cppCompiler.define "DLL_EXPORT"
            }
        }
        withType(GoogleTestTestSuiteBinarySpec) {
            lib library: "googleTest", linkage: "static"

            if (targetPlatform.operatingSystem.linux) {
                cppCompiler.args '-pthread'
                linker.args '-pthread'
            }
        }
    }
}

def findGoogleTestStaticLib(Platform p) {
    println System.getProperty("os.name") + System.getProperty("os.version") + System.getProperty("os.arch")
    String osName = org.gradle.internal.os.OperatingSystem.current().getName();
    String osVersion = org.gradle.internal.os.OperatingSystem.current().getVersion();
    String osArch = org.gradle.internal.os.OperatingSystem.current().getArch();
    println "*** $osName, $osVersion, $osArch was detected."

    if (p.operatingSystem.windows) {
        return "Release/gtest.lib"
    } else {
        return "libgtest.a"
    }
}
